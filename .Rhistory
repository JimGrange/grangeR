ymax = .data$mean_acc + .data$se_acc),
width = 0.02) +
geom_errorbarh(aes(colour = .data$condition,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 200) +
theme_bw() +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
plot <- id_averaged_data |>
ggplot(aes(x = .data$mean_rt,
y = .data$mean_acc,
group = .data$condition_1)) +
geom_point(size = 3,
aes(colour = .data$condition_1)) +
geom_line(aes(colour = .data$condition_1),
linewidth = 1) +
geom_errorbar(aes(colour = .data$condition_1,
ymin = .data$mean_acc - .data$se_acc,
ymax = .data$mean_acc + .data$se_acc),
width = 500) +
geom_errorbarh(aes(colour = .data$condition_1,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 200) +
theme_bw() +
facet_grid(.~.data$condition_2) +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
plot <- id_averaged_data |>
ggplot(aes(x = .data$mean_rt,
y = .data$mean_acc,
group = .data$condition_1)) +
geom_point(size = 3,
aes(colour = .data$condition_1)) +
geom_line(aes(colour = .data$condition_1),
linewidth = 1) +
geom_errorbar(aes(colour = .data$condition_1,
ymin = .data$mean_acc - .data$se_acc,
ymax = .data$mean_acc + .data$se_acc),
width = 0.02) +
geom_errorbarh(aes(colour = .data$condition_1,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 0.02) +
theme_bw() +
facet_grid(.~.data$condition_2) +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
plot <- id_averaged_data |>
ggplot(aes(x = .data$mean_rt,
y = .data$mean_acc,
group = .data$condition_1)) +
geom_point(size = 3,
aes(colour = .data$condition_1)) +
geom_line(aes(colour = .data$condition_1),
linewidth = 1) +
geom_errorbar(aes(colour = .data$condition_1,
ymin = .data$mean_acc - .data$se_acc,
ymax = .data$mean_acc + .data$se_acc),
width = 0.02) +
geom_errorbarh(aes(colour = .data$condition_1,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 0.02) +
theme_bw() +
facet_grid(.~.data$condition_2) +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
plot <- id_averaged_data |>
ggplot(aes(x = .data$mean_rt,
y = .data$mean_acc,
group = .data$condition_1)) +
geom_point(size = 3,
aes(colour = .data$condition_1)) +
geom_line(aes(colour = .data$condition_1),
linewidth = 1) +
geom_errorbar(aes(colour = .data$condition_1,
ymin = .data$mean_acc - .data$se_acc,
ymax = .data$mean_acc + .data$se_acc),
width = 0.02) +
geom_errorbarh(aes(colour = .data$condition_1,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 0.00000002) +
theme_bw() +
facet_grid(.~.data$condition_2) +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
id_averaged_data$condition_1 <- as.factor(id_averaged_data[[conditions[1]]])
id_averaged_data$condition_2 <- as.factor(id_averaged_data[[conditions[2]]])
plot <- id_averaged_data |>
ggplot(aes(x = .data$mean_rt,
y = .data$mean_acc,
group = .data$condition_1)) +
geom_point(size = 3,
aes(colour = .data$condition_1)) +
geom_line(aes(colour = .data$condition_1),
linewidth = 1) +
geom_errorbar(aes(colour = .data$condition_1,
ymin = .data$mean_acc - .data$se_acc,
ymax = .data$mean_acc + .data$se_acc),
width = 0.0) +
geom_errorbarh(aes(colour = .data$condition_1,
xmin = .data$mean_rt - .data$se_rt,
xmax = .data$mean_rt + .data$se_rt),
height = 0.0) +
theme_bw() +
facet_grid(.~.data$condition_2) +
scale_colour_discrete(name = conditions) +
labs(x = "Mean Response Time (ms)",
y = "Proportion Accuracy") +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
plot
load_all()
head(data)
devtools::load_all()
devtools::load_all(".")
d <- grangeR::task_switching
d
?get_cdf
b <- get_cdf(data = d)
b <- get_cdf(data = d,
id_var = "id")
b$plot
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"))
b$plot
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence"))
b$plot
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"))
b$plot
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"))
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"))
data = d
conditions = c("response_set_sequence")
id_var = "id"
data |>
group_by(.data$id,
across(all_of(conditions)))
accuracy_var = "accuracy"
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data$accuracy_var))
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]))
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]] / n()))
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]) / n())
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]), .groups = "drop")
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
rt_var = "rt"
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
probs = c(0.1, 0.3, 0.5, 0.7, 0.9)
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data
accuracy <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]), .groups = "drop")
id_data |>
pivot_wider(quantile)
library(tidyverse)
id_data |>
pivot_wider(quantile)
id_data
?pivot_wider
accuracy
id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions)))
id_data
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
new_id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions)))
new_id_data
new_id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions))) |>
mutate(new_rt = .data$rt * prop)
new_id_data
new_id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions))) |>
mutate(rt = .data$rt * prop) |>
select(!prop)
new_id_data
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"))
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"))
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
defective = TRUE)
b$plot
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
defective = TRUE)
b$plot
devtools::load_all(".")
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
defective = TRUE)
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
defective = TRUE)
b$plot
b
?get_cdf
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = TRUE,
defective = TRUE)
b$plot
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = FALSE,
defective = TRUE)
if(!is.null(id_var)){
if(id_var != "id"){
data$id <- data[[id_var]]
}
}
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data
accuracy <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]), .groups = "drop")
accuracy
id_data |>
inner_join(accuracy, by = c("id", all_of(conditions))) |>
mutate(quantile = quantile * prop) |>
select(!prop)
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = FALSE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = TRUE,
defective = TRUE)
b$plot
b$id_data
b$id_averaged_data
# get proportion accuracy per id per condition
accuracy <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(prop = mean(.data[[accuracy_var]]), .groups = "drop")
# based on this,
id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions))) |>
mutate(new_quantile = quantile * prop) |>
select(!prop)
id_data
# based on this, scale the quantile by proportion accuracy
id_data <- id_data |>
inner_join(accuracy, by = c("id", all_of(conditions))) |>
mutate(scaled_quantile = quantile * prop) |>
select(!prop)
id_data
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
.data$quantile) |>
summarise(scaled_quantile = mean(scaled_quantil),
mean_rt = mean(.data$rt),
se_rt = sd(.data$rt) / sqrt(length(.data$rt)),
.groups = "drop")
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
.data$quantile) |>
summarise(scaled_quantile = mean(scaled_quantile),
mean_rt = mean(.data$rt),
se_rt = sd(.data$rt) / sqrt(length(.data$rt)),
.groups = "drop")
id_averaged_data
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
.data$quantile) |>
summarise(scaled_quantile = mean(scaled_quantile),
mean_rt = mean(.data$rt),
se_rt = sd(.data$rt) / sqrt(length(.data$rt)),
.groups = "drop") |>
select(!quantile) |>
rename(quantile = scaled_quantile)
id_averaged_data
devtools::load_all(".")
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = TRUE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = TRUE,
defective = FALSE)
b$plot
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence"),
include_errors = TRUE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence"),
include_errors = TRUE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"),
include_errors = TRUE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("compatibility"),
include_errors = TRUE,
defective = TRUE)
b <- get_cdf(data = d,
id_var = "id",
conditions = c("compatibility"),
include_errors = TRUE,
defective = FALSE)
devtools::check()
devtools::document()
devtools::check()
?get_caf
get_caf
devtools::document()
devtools::check()
?ntile
?geom_errorbarh
?inner_join
?globalVariables
devtools::global_variables()
utils::globalVariables()
devtools::document()
devtools::load_all(".")
devtools::check()
data
unique(data$id)
length(unique(data$id))
devtools::document()
d = grangeR::flanker_data
d
data
devtools::document()
devtools::check()
usethis::use_readme_rmd()
devtools::build_readme()
devtools::check()
devtools::build_readme()
devtools::build_readme()
data <- grangeR::task_switching
head(data)
get_cdf(data = data,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"),
defective = TRUE)
get_cdf(data = data,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"),
include_errors = TRUE,
defective = TRUE)
devtools::build_readme()
devtools::build_readme()
devtools::load_all(".")
devtools::load_all(".")
cdf_plot <- get_cdf(data = data,
id_var = "id",
conditions = c("response_set_sequence",
"stimulus_set_sequence",
"compatibility"),
defective = TRUE)
cdf_plot$plot
```{r fig.width=6}
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
cdf_plot
devtools::build_readme()
devtools::build_readme()
