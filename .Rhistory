library(devtools)
load_all()
check()
ectva <- read_csv("data.csv")
library(tidyverse)
ectva <- read_csv("ectva.csv")
usethis::use_data(ectva)
load_all
load_all()
d <- data("ectva")
d
d <- data(ectva)
d
data(ectva)
d <- data(ectva)
d = ectva
d
use_r("get_cdf")
taiL(data)
tail(d)
d |> View()
load_all()
load_all()
e <- get_cdf(d, include_errors = FALSE)
load_all()
e <- get_cdf(d, include_errors = FALSE)
d
e
accuracy_var = "accuracy"
data = d
data <- data |>
filter(accuracy_var == 1)
accuracy_var
get_cdf <- function(data,
id_var = "id",
rt_var = "rt",
accuracy_var = "accuracy",
include_errors = FALSE,
group_var = NULL,
x_var = NULL,
y_var = NULL){
# remove errors if requested
if(include_errors == FALSE){
data <- data |>
filter(.data[[accuracy_var]] == 1)
}
return(data)
}
load_all()
e <- get_cdf(d, include_errors = FALSE)
e |> View()
group_var = NULL
x_var = NULL
y_var = NULL
# get list if condition names, if present
conditions <- unlist(list(group_var, x_var, y_var))
conditions
group_var <- "sequence"
# get list if condition names, if present
conditions <- unlist(list(group_var, x_var, y_var))
conditions
x_var = "compatibility"
# get list if condition names, if present
conditions <- unlist(list(group_var, x_var, y_var))
conditions
unlist(conditions)
conditions <- NULL
unlist(conditions)
conditions <- c("a", "b", "c")
unlist(conditions)
data = d
conditions
conditions = "sequence"
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop")
head(data)
data = ectva
data
conditions = "response_set_sequence"
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop")
probs = c(.1, .3, .5, .7, .9)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles,
names_sep = "_")
quantile(data$rt, probs = probs)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles, names_repair = "minimal")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%"))
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ as.numeric(str_remove(.x, "%")))
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
rename_with(~ as.numeric(.x))
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%"))
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
rename_with(~ as.numeric(.x)) |>
pivot_longer(names_to= "x")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(names_to= "x")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = all,names_to= "x")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = all_of,names_to= "x")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),names_to= "x")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),
names_to = "quantile")
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),
names_to = "quantile",
values_to = rt_var)
rt_var = "rt"
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),
names_to = "quantile",
values_to = rt_var)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = quantile / 100)
data |>
group_by(across(all_of(conditions))) |>
summarise(quantiles = list(quantile(rt, probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = -all_of(conditions),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
load_all
load_all()
?all_of
load_all()
load_all()
get_cdf(ectva, conditions = c("stimulus_set_sequence"))
get_cdf(ectva, conditions = c("stimulus_set_sequence"))
get_cdf(ectva, conditions = "stimulus_set_sequence")
get_cdf
load_all()
get_cdf
load_all()
get_cdf
?rename_with
?unnest_wider
load_all()
get_cdf
