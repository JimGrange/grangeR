names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(m = mean(rt))
id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(mean_rt = mean(rt),
se_rt = sd(rt) / sqrt(length(rt)))
summary_data <- id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(mean_rt = mean(rt),
se_rt = sd(rt) / sqrt(length(rt)),
.groups = "drop")
summary_data
id_data
document()
document()
load_all()
document()
document()
load_all()
document()
document()
document()
d
load_all()
x = get_cdf(d, id_var = NULL, conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = NULL, conditions = "compatibility")
x
tail(x$id_averaged_data)
tail(x$id_data)
load_all()
x = get_cdf(d, id_var = NULL, conditions = "compatibility")
x = get_cdf(d, id_var = NULL, conditions = "compatibility")
tail(x$id_data)
x
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
c
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = "compatibility")
x
x = get_cdf(d, id_var = "id")
x
load_all()
x = get_cdf(d, id_var = "id", conditions = c("response_set_sequence", "compatibility")
)
x
id_averaged_data
id_data
conditions
conditions = c("response_set_sequence", "compatibility")
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(mean_rt = mean(rt),
se_rt = sd(rt) / sqrt(length(rt)),
.groups = "drop")
id_averaged_data
data = task_switching
id_var = "id"
conditions = c("response_set_sequence", "compatibility")
probs = c(.1, .3, .5, .7, .9)
data <- data |>
mutate(id = 1)
length(conditions > 3
)
# if conditions greater than three, plot will not be returned
if(length(conditions) > 3){
message("Number of conditions is greater than three. Plot will not
be returned.")
}
data = task_switching
data <- data |>
filter(data[[accuracy_var]] == 1)
accuracy_var = "accuracy"
rt_var = "rt"
data <- data |>
filter(data[[accuracy_var]] == 1)
data
# get the CDF values for each individual
id_data <- data |>
group_by(id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(mean_rt = mean(rt),
se_rt = sd(rt) / sqrt(length(rt)),
.groups = "drop")
id_averaged_data
id_averaged_data
id_averaged_data$condition_1 <- as.factor(id_averaged_data[[conditions[1]]])
id_averaged_data$condition_2 <- as.factor(id_averaged_data[[conditions[2]]])
id_averaged_data
id_averaged_data
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = conditio
n_1)
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3)
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3) +
geom_line(aes(colour = condition_1),
linewidth = 1)
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3) +
geom_line(aes(colour = condition_1),
linewidth = 1) +
geom_errorbar(aes(ymin = mean_rt - se_rt,
ymax = mean_rt + se_rt,
colour = condition_1),
width = 0.02) +
facet_wrap(.~condition_2)
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3) +
geom_line(aes(colour = condition_1),
linewidth = 1) +
geom_errorbar(aes(ymin = mean_rt - se_rt,
ymax = mean_rt + se_rt,
colour = condition_1),
width = 0.02) +
facet_wrap(.~condition_2) +
theme_bw() +
labs(y = "Mean Response Time (ms)",
x = "Probability") +
scale_x_continuous(breaks = probs,
limits = c(0, 1)) +
coord_flip() +
scale_colour_discrete(name = condition_1) +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3) +
geom_line(aes(colour = condition_1),
linewidth = 1) +
geom_errorbar(aes(ymin = mean_rt - se_rt,
ymax = mean_rt + se_rt,
colour = condition_1),
width = 0.02) +
facet_wrap(.~condition_2) +
theme_bw() +
labs(y = "Mean Response Time (ms)",
x = "Probability") +
scale_x_continuous(breaks = probs,
limits = c(0, 1)) +
coord_flip() +
scale_colour_discrete(name = condition_1) +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition_1)) +
geom_point(aes(colour = condition_1),
size = 3) +
geom_line(aes(colour = condition_1),
linewidth = 1) +
geom_errorbar(aes(ymin = mean_rt - se_rt,
ymax = mean_rt + se_rt,
colour = condition_1),
width = 0.02) +
facet_wrap(.~condition_2) +
theme_bw() +
labs(y = "Mean Response Time (ms)",
x = "Probability") +
scale_x_continuous(breaks = probs,
limits = c(0, 1)) +
coord_flip() +
scale_colour_discrete(name = conditions[1]) +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
load_all()
conditions
conditions[3] = "stimulus_set_sequence"
conditions
x = get_cdf(data, id_var = "id", conditions = conditions)
x = get_cdf(data, id_var = "id", conditions = c(conditions))
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "compatibility", "stimulus_set_sequence"))
conditions
include_errors
str(conditions)
rt_var
accuracy_var
id_var
data <- data |>
filter(data[[accuracy_var]] == 1)
# get the CDF values for each individual
id_data <- data |>
group_by(id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
# get the CDF data averaged across subjects
if(is.null(id_var)){
id_averaged_data <- id_data |>
rename(mean_rt = rt) |>
mutate(se_rt = 0)
} else {
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
quantile) |>
summarise(mean_rt = mean(rt),
se_rt = sd(rt) / sqrt(length(rt)),
.groups = "drop")
}
id_averaged_data
# plot if there is one condition
if(length(conditions == 1)){
id_averaged_data$condition <- as.factor(id_averaged_data[[conditions]])
plot <- id_averaged_data |>
ggplot(aes(x = quantile,
y = mean_rt,
group = condition)) +
geom_point(aes(colour = condition),
size = 3) +
geom_line(aes(colour = condition),
linewidth = 1) +
geom_errorbar(aes(ymin = mean_rt - se_rt,
ymax = mean_rt + se_rt,
colour = condition),
width = 0.02) +
theme_bw() +
labs(y = "Mean Response Time (ms)",
x = "Probability") +
scale_x_continuous(breaks = probs,
limits = c(0, 1)) +
coord_flip() +
scale_colour_discrete(name = conditions) +
theme(text = element_text(size = 18)) +
theme(legend.position = "bottom")
# remove the conditions tag
id_averaged_data <- id_averaged_data |> select(-condition)
}
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "compatibility", "stimulus_set_sequence"))
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "compatibility", "stimulus_set_sequence"))
x
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "compatibility", "stimulus_set_sequence"))
x
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
x
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence"))
x
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence"))
x
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
x
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence"))
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
?facet_grid
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
load_all()
x = get_cdf(data, id_var = "id", conditions = c("response_set_sequence", "stimulus_set_sequence", "compatibility"))
x
load_all
load_all()
?get_cdf
document()
?get_cdf
document()
?get_cdf
document()
?get_cdf
library(flankr)
x = exampleData
x
head(x)
get_cdf(x, id_var = "subject")
data = x
id_var = "subject"
data <- data |>
filter(data[[accuracy_var]] == 1)
data |>
group_by(id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
data |>
group_by(id_var,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
condiitons
conditions
conditions = NULL
data |>
group_by(id_var,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
data |>
group_by(id_var,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id_var),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
load_all()
id_var
# if id is not null, add column called id
if(!is.null(id_var)){
if(id_var != "id"){
data$id <- data[[id_var]]
}
}
data
data <- data |>
filter(data[[accuracy_var]] == 1)
# get the CDF values for each individual
id_data <- data |>
group_by(id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data
x = get_cdf(id_var = "subject")
x = get_cdf(exampleData, id_var = "subject")
x
data = exampleData
x = get_cdf(data, id_var = "subject", conditions = "condition")
x = get_cdf(data, id_var = "subject", conditions = "congruency")
x = get_cdf(data, id_var = "subject", conditions = c("congruency", "condition"))
data
data = data |> as_tibble()
data
data <- data |> rename(warning = condition)
head(data)
flanker_data = data
usethis::use_data(flanker_data)
document()
check()
check()
check()
check()
check()
document()
load_all()
check()
load_all()
check()
check()
data
data = task_switching
data |>
group_by(.data$id,
across(all_of(conditions)))
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop")
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
# get the CDF values for each individual
id_data <- data |>
group_by(.data$id,
across(all_of(conditions))) |>
summarise(quantiles = list(quantile(.data[[rt_var]],
probs = probs)),
.groups = "drop") |>
unnest_wider(.data$quantiles) |>
rename_with(~ str_remove(.x, "%")) |>
pivot_longer(cols = c(-conditions, -.data$id),
names_to = "quantile",
values_to = rt_var) |>
mutate(quantile = as.numeric(quantile) / 100)
id_data
id_averaged_data <- id_data |>
group_by(across(all_of(conditions)),
.data$quantile) |>
summarise(mean_rt = mean(.data$rt),
se_rt = sd(.data$rt) / sqrt(length(.data$rt)),
.groups = "drop")
id_averaged_data
check()
check()
